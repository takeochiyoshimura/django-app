(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";!function(e){e.views&&e.views.tags({wbVideoPlayer:{dataBoundOnly:!0,mainElement:"div",template:"\n            <div class='wb-player' data-link=\"\n                                        {on 'touch' ~tag.showPanel}\n                                        {on ~tag.showPanel}\n                                        {on 'mousemove' ~tag.showPanel}\n                                        {on 'mouseleave' ~tag.hidePanel}\">\n                \n                <p class=\"wb-player__no-video\" data-link=\"class{merge: ~tag.isAvailable toggle='hide'}\">видео отсутствует</p>\n                <div class=\"wb-player__loader\" data-link=\"class{merge: ~tag.isLoaded toggle='hide'}\"></div>\n                {^{if ~tagCtx.props.src != null}}\n                    <div class='wb-player__container' \n                        data-link=\"\n                                {on ~tag.changePlayStatus}\n                                class{merge: (~tagCtx.props.useOverlay && !~tag.isPlaying && ~tag.isAvailable) toggle='overlayed'}\">\n                        <button class=\"wb-player__btn\" type=\"button\" aria-label=\"Play video\"></button>\n                        <video class='wb-player__video j-wb-video-player'\n                            data-link=\"src{: ~tagCtx.props.src}\n                                    {on 'loadedmetadata' ~tag.setDuration}\n                                    {on 'timeupdate' ~tag.updateProgress}\n                                    {on 'ended' ~tag.replay}\n                                    {on 'pause' ~tag.pause}\n                                    {on 'play' ~tag.play}\n                                    {on 'loadedmetadata' ~tag.switchLoadedStatus}\n                                    {on 'error' ~tag.showErrorLabel}\" {{if ~tagCtx.props.poster}}poster='{{:~tagCtx.props.poster}}'{{/if}}preload='none' muted></video>\n\n                    </div>\n                    <div class='wb-player__control-panel' data-link=\"class{merge: ~tag.showControlPanel && ~tag.isAvailable toggle='shown'}\">\n                        <button class='wb-player__play' data-link=\"{on ~tag.changePlayStatus}class{merge: ~tag.isPlaying toggle='playing'}\" type=\"button\">Play/Pause</button>\n                        <div class='wb-player__progress' data-link=\"{on ~tag.runFromTime}\">\n                            <div class='wb-player__progress-play' data-link=\"css-width{:~tag.currentProgress + '%'}\"></div>\n                        </div>\n                        <button class='wb-player__mute' data-link=\"{on ~tag.mute}class{merge: !~tag.isMuted toggle='unmuted'}\" type=\"button\">Mute/Unmute</button>\n                    </div>\n                {{/if}}\n            </div>",init:function(){this.duration=0,this.currentProgress=0,this.timesPlayed=0,this.isPlaying=!1,this.isMuted=!0,this.timer=null,this.fadeOutTimeout=2e3,this.showControlPanel=!1,this.isLoaded=!1,this.isAvailable=!0},onAfterLink:function(){this.video=this.mainElem[0].querySelector(".j-wb-video-player")},onUpdate:function(){e.observable(this).setProperty({currentProgress:0,isMuted:!0,isLoaded:!1,isAvailable:!0})},setDuration:function(t){e.observable(this).setProperty({duration:t.currentTarget.duration})},updateProgress:function(t){e.observable(this).setProperty({currentProgress:100*t.currentTarget.currentTime/t.currentTarget.duration})},runFromTime:function(t){var a=t.offsetX/t.currentTarget.clientWidth*this.duration;this.video.currentTime=a,e.observable(this).setProperty({currentTime:a})},changePlayStatus:function(){this.isAvailable&&(!(this.video.paused||this.video.ended)?this.video.pause():this.video.play())},play:function(){e.observable(this).setProperty({isPlaying:!0})},pause:function(){e.observable(this).setProperty({isPlaying:!1})},mute:function(){0==this.video.volume||this.video.muted?(this.video.volume=.5,this.video.muted=!1):this.video.volume=0,e.observable(this).setProperty({isMuted:!this.isMuted})},replay:function(){this.tagCtx.props.maxReplays>this.timesPlayed&&this.video.play()},showPanel:function(){clearTimeout(this.timer),e.observable(this).setProperty({showControlPanel:!0}),this.timer=this.hidePanel()},hidePanel:function(){var t=this;return setTimeout(function(){return e.observable(t).setProperty({showControlPanel:!1})},this.fadeOutTimeout)},switchLoadedStatus:function(){e.observable(this).setProperty({isLoaded:!0})},showErrorLabel:function(t){e.observable(this).setProperty({isLoaded:!0,isAvailable:!1})}}})}(jQuery);

},{}]},{},[1]);
